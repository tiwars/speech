"use strict";
// // Imports the Google Cloud client library
// const speech = require('@google-cloud/speech');
// const fs = require('fs');

// // Creates a client
// const client = new speech.SpeechClient();

// // The name of the audio file to transcribe
// const fileName = './resources/recording.amr';

// // Reads a local audio file and converts it to base64
// const file = fs.readFileSync(fileName);
// const audioBytes = file.toString('base64');

// // The audio file's encoding, sample rate in hertz, and BCP-47 language code
// const audio = {
//   content: audioBytes,
// };
// const config = {
//   encoding: 'AMR',
//   sampleRateHertz: 8000,
//   languageCode: 'en-US',
// };
// const request = {
//   audio: audio,
//   config: config,
// };

// // Detects speech in the audio file
// client
//   .recognize(request)
//   .then(data => {
//     const response = data[0];
//     const transcription = response.results
//       .map(result => result.alternatives[0].transcript)
//       .join('\n');
//     console.log(`Transcription: ${transcription}`);
//   })
//   .catch(err => {
//     console.error('ERROR:', err);
//   });


  // Imports the Google Cloud client library
// const speech = require('@google-cloud/speech');

// // Creates a client
// const client = new speech.SpeechClient();

// /**
//  * TODO(developer): Uncomment the following lines before running the sample.
//  */
// const gcsUri = 'gs://test-speech-poc/recording.amr';
// const encoding = 'AMR';
// const sampleRateHertz = 8000;
// const languageCode = 'en-US';

// const config = {
//   encoding: encoding,
//   sampleRateHertz: sampleRateHertz,
//   languageCode: languageCode,
// };

// const audio = {
//   uri: gcsUri,
// };

// const request = {
//   config: config,
//   audio: audio,
// };

// // Detects speech in the audio file. This creates a recognition job that you
// // can wait for now, or get its result later.
// client.longRunningRecognize(request).then(data => {
//       const response = data[0];
//       const operation = response;
//       // Get a Promise representation of the final result of the job
//       return operation.promise();
//     })
//     .then(data => {
//       const response = data[0];
//       const transcription = response.results
//         .map(result => result.alternatives[0].transcript)
//         .join('\n');
//       console.log(`Transcription: ${transcription}`);
//     })
//     .catch(err => {
//       console.error('ERROR:', err);
//     });
// Get a Promise representation of the final result of the job
// const [response] = await operation.promise();
// const transcription = response.results
//   .map(result => result.alternatives[0].transcript)
//   .join('\n');
// console.log(`Transcription: ${transcription}`);




// const record = require('node-record-lpcm16');

// // Imports the Google Cloud client library
// const speech = require('@google-cloud/speech');

// // Creates a client
// const client = new speech.SpeechClient();

// /**
//  * TODO(developer): Uncomment the following lines before running the sample.
//  */
// const encoding = 'LINEAR16';//'Encoding of the audio file, e.g. LINEAR16';
// const sampleRateHertz = 16000;
// const languageCode = 'en-US';

// const request = {
//   config: {
//     encoding: encoding,
//     sampleRateHertz: sampleRateHertz,
//     languageCode: languageCode,
//   },
//   interimResults: false, // If you want interim results, set this to true
// };

// // Create a recognize stream
// const recognizeStream = client
//   .streamingRecognize(request)
//   .on('error', console.error)
//   .on('data', data =>
//     process.stdout.write(
//       data.results[0] && data.results[0].alternatives[0]
//         ? `Transcription: ${data.results[0].alternatives[0].transcript}\n`
//         : `\n\nReached transcription time limit, press Ctrl+C\n`
//     )
//   );

// // Start recording and send the microphone input to the Speech API
// record
//   .start({
//     sampleRateHertz: sampleRateHertz,
//     threshold: 0,
//     // Other options, see https://www.npmjs.com/package/node-record-lpcm16#options
//     verbose: false,
//     recordProgram: 'rec', // Try also "arecord" or "sox"
//     silence: '10.0',
//   })
//   .on('error', console.error)
//   .pipe(recognizeStream);

// console.log('Listening, press Ctrl+C to stop.');